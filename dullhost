#!/bin/bash

# Original idea: https://github.com/progrium/gitreceive
# License: MIT

GITUSER=${GITUSER:-git}
GITHOME="/home/$GITUSER"
SELF=`which $0`

case "$1" in

  # Public commands
  init) 
    $SELF install

    rm -rf /etc/nginx/sites-enabled
    ln -s /home/nginx /etc/nginx/sites-enabled

    useradd -d $GITHOME $GITUSER || true
    mkdir -p $GITHOME/.ssh
    mkdir /home/www /home/nginx
    chown www-data:www-data /home/www /home/nginx

    touch $GITHOME/.ssh/authorized_keys
    cat > /etc/sudoers.d/dullhost <<EOF
$GITUSER     ALL=(ALL) NOPASSWD: /usr/sbin/service nginx reload
$GITUSER     ALL=(www-data) NOPASSWD: ALL
EOF
    chmod 440 /etc/sudoers.d/dullhost
    
    cat > $GITHOME/receiver <<EOF
#!/bin/bash
REPOSITORY="\$1"
REVISION="\$2"
USERNAME="\$3"
FINGERPRINT="\$4"

if [ ! -d "/home/www/\$REPOSITORY" ]; then
  sudo -u www-data $SELF init-site \$REPOSITORY
fi
sudo -u www-data $SELF update-site \$REPOSITORY

sudo service nginx reload
EOF
    chmod +x $GITHOME/receiver
    chown -R $GITUSER $GITHOME
    echo "Created receiver script in $GITHOME for user '$GITUSER'."
    ;;

  install)
    apt-get update
    apt-get install -y nginx git vim php5-fpm
    ;;

  update-site)
    REPOSITORY="$2"

    cd /home/www/$REPOSITORY
    git pull

    if [ -f /home/www/$REPOSITORY/install ]; then
      ./install
    fi

    NGINX_CONF="location / { return 444; }"
    if [ -f /home/www/$REPOSITORY/nginx.conf ]; then
      NGINX_CONF="include /home/www/$REPOSITORY/nginx.conf;"
    fi

    if [ -f /home/www/$REPOSITORY/CNAME ]; then
      DOMAINS=`cat /home/www/$REPOSITORY/CNAME`
      cat << EOF > /home/nginx/$REPOSITORY
      server {
        listen *:80;
        server_name $DOMAINS;
        root /home/www/$REPOSITORY;
        location /.git { deny   all; }
        $NGINX_CONF
      }
EOF
    else
      echo > /home/nginx/$REPOSITORY
    fi
    ;;
  init-site)
    REPOSITORY=$2
    cd /home/www
    git clone ~git/$REPOSITORY $REPOSITORY
    ;;


  upload-key) # sudo gitreceive upload-key <username>
    KEY=$(cat)
    FINGERPRINT=$(ssh-keygen -lf /dev/stdin <<< $(echo $KEY) | awk '{print $2}')
    AUTHORIZED_KEYS=$GITHOME/.ssh/authorized_keys
    # When this key is used, use the ssh 'forced command' feature to have 'gitreceive run' to run instead.
    KEY_PREFIX="command=\"$SELF run $2 $FINGERPRINT\",no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding,no-port-forwarding"
    echo "$KEY_PREFIX $KEY" >> $AUTHORIZED_KEYS
    echo $FINGERPRINT
    ;;

# Internal commands
  run) 
    export RECEIVE_USER=$2
    export RECEIVE_FINGERPRINT=$3
    # ssh provides the original requested command in $SSH_ORIGINAL_COMMAND
    export RECEIVE_REPO="$(echo $SSH_ORIGINAL_COMMAND | awk '{print $2}' | perl -pe 's/(?<!\\)'\''//g' | sed 's/\\'\''/'\''/g')"
    REPO_PATH="$GITHOME/$RECEIVE_REPO"
    if [ ! -d $REPO_PATH ]; then
      mkdir -p $REPO_PATH
      cd $REPO_PATH
      git init --bare > /dev/null
    fi
    cd $GITHOME
    POSTRECEIVE_HOOK="$REPO_PATH/hooks/post-receive"
    cat > $POSTRECEIVE_HOOK <<EOF
#!/bin/bash
cat | $SELF hook
EOF
    chmod +x $POSTRECEIVE_HOOK
    git-shell -c "$SSH_ORIGINAL_COMMAND"
    ;;

  hook)
    while read oldrev newrev refname
    do
      # Only run this script for the master branch. You can remove this 
      # if block if you wish to run it for others as well.
      if [[ $refname = "refs/heads/master" ]] ; then
        $GITHOME/receiver "$RECEIVE_REPO" "$newrev" "$RECEIVE_USER" "$RECEIVE_FINGERPRINT"  
      fi
    done
    ;;
  *)
    echo "Usage: gitreceive <command> [options]"
    ;;
esac
