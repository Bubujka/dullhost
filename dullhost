#!/bin/bash

# Original idea: https://github.com/progrium/gitreceive
# License: MIT

GITUSER=${GITUSER:-git}
GITHOME="/home/$GITUSER"
SELF=`which $0`


function __generate_php_pool_conf {
  REPOSITORY="$1"
  cat << EOF > /etc/php5/fpm/pool.d/${REPOSITORY}.conf
[$REPOSITORY]
user = \$pool
group = \$pool
listen = /var/run/php5-fpm-\$pool.sock
pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
pm.max_requests = 500
;pm.status_path = /status
;ping.path = /ping
;access.log = log/\$pool.access.log
;slowlog = log/\$pool.log.slow
;request_slowlog_timeout = 0
request_terminate_timeout = 10
;chroot = 
chdir = /
catch_workers_output = yes
EOF
  
  if [ -f /home/git/env-files/$REPOSITORY ]; then
    echo >> /etc/php5/fpm/pool.d/${REPOSITORY}.conf
    cat /home/git/env-files/$REPOSITORY >> /etc/php5/fpm/pool.d/${REPOSITORY}.conf
  fi
  chmod 600 /etc/php5/fpm/pool.d/${REPOSITORY}.conf

}

function __generate_nginx_conf {
  REPOSITORY="$1"
  NGINX_CONF="location / { return 444; }"
  if [ -f /home/www/$REPOSITORY/nginx.conf ]; then
    NGINX_CONF="include /home/www/$REPOSITORY/nginx.conf;"
  fi

  if [ -f /home/www/$REPOSITORY/CNAME ]; then
    DOMAINS=`cat /home/www/$REPOSITORY/CNAME`
    cat << EOF > /etc/nginx/sites-enabled/$REPOSITORY
server {
  listen *:80;
  server_name $DOMAINS;
  set \$php_pool unix:/var/run/php5-fpm-$REPOSITORY.sock;
  root /home/www/$REPOSITORY;
  location /.git { deny   all; }
  $NGINX_CONF
}
EOF
  else
    echo > /etc/nginx/sites-enabled/$REPOSITORY
  fi
}




case "$1" in
  # Public commands
  init) 
    apt-get update
    apt-get install -y nginx git vim php5-fpm

    cat > /etc/nginx/conf.d/dullhost.conf <<EOF
server_names_hash_bucket_size 256;
EOF

    service nginx start

    useradd -d $GITHOME $GITUSER || true
    mkdir -p $GITHOME/.ssh
    mkdir /home/www 

    chown www-data:www-data /home/www

    touch $GITHOME/.ssh/authorized_keys

    cat > /etc/sudoers.d/dullhost <<EOF
$GITUSER     ALL=(ALL) NOPASSWD: ALL
EOF

    chmod 440 /etc/sudoers.d/dullhost
    
    cat > $GITHOME/receiver <<EOF
#!/bin/bash
REPOSITORY="\$1"
REVISION="\$2"
USERNAME="\$3"
FINGERPRINT="\$4"

if [ "\$REPOSITORY" == "env" ]; then
  if [ ! -d "/home/git/env-files" ]; then
    git clone /home/git/env /home/git/env-files
  else
    cd /home/git/env-files
    git pull
  fi

  cd /home/git/env-files
  for file in *; do
    sudo $SELF update-configs \$file
  done
else
  if [ ! -d "/home/www/\$REPOSITORY" ]; then
    sudo $SELF init-site \$REPOSITORY
  fi
  sudo -u \$REPOSITORY $SELF update-site \$REPOSITORY
  sudo $SELF update-configs \$REPOSITORY
fi
EOF

cat > /etc/nginx/php_fastcgi <<EOF
location ~ \.php$ {
  fastcgi_pass   \$php_pool;
  fastcgi_index  index.php;
  fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
  fastcgi_param  REDIRECT_QUERY_STRING     \$query_string;
  include        fastcgi_params;
}
EOF

cat > /etc/nginx/php_fastcgi_internal <<EOF
location ~ \.php$ {
  internal;
  fastcgi_pass   \$php_pool;
  fastcgi_index  index.php;
  fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
  fastcgi_param  REDIRECT_QUERY_STRING     \$query_string;
  include        fastcgi_params;
}
EOF

    chmod +x $GITHOME/receiver
    chown -R $GITUSER $GITHOME
    echo "Created receiver script in $GITHOME for user '$GITUSER'."
    ;;

  update-site)
    REPOSITORY="$2"

    cd /home/www/$REPOSITORY
    git pull

    if [ -f /home/www/$REPOSITORY/install ]; then
      ./install
    fi

    ;;
  update-configs)
    REPOSITORY=$2
    __generate_php_pool_conf $REPOSITORY
    __generate_nginx_conf $REPOSITORY

    service php5-fpm reload
    service nginx reload
    ;;
  init-site)
    REPOSITORY=$2

    adduser --gecos "" --disabled-password $REPOSITORY
    usermod -a -G www-data $REPOSITORY

    cd /home/www
    git clone ~git/$REPOSITORY $REPOSITORY
    chown -R $REPOSITORY:$REPOSITORY $REPOSITORY
    ;;


  upload-key) # sudo gitreceive upload-key <username>
    KEY=$(cat)
    FINGERPRINT=$(ssh-keygen -lf /dev/stdin <<< $(echo $KEY) | awk '{print $2}')
    AUTHORIZED_KEYS=$GITHOME/.ssh/authorized_keys
    # When this key is used, use the ssh 'forced command' feature to have 'gitreceive run' to run instead.
    KEY_PREFIX="command=\"$SELF run $2 $FINGERPRINT\",no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding,no-port-forwarding"
    echo "$KEY_PREFIX $KEY" >> $AUTHORIZED_KEYS
    echo $FINGERPRINT
    ;;

# Internal commands
  run) 
    export RECEIVE_USER=$2
    export RECEIVE_FINGERPRINT=$3
    # ssh provides the original requested command in $SSH_ORIGINAL_COMMAND
    export RECEIVE_REPO="$(echo $SSH_ORIGINAL_COMMAND | awk '{print $2}' | perl -pe 's/(?<!\\)'\''//g' | sed 's/\\'\''/'\''/g')"
    REPO_PATH="$GITHOME/$RECEIVE_REPO"
    if [ ! -d $REPO_PATH ]; then
      mkdir -p $REPO_PATH
      cd $REPO_PATH
      git init --bare > /dev/null
    fi
    cd $GITHOME
    POSTRECEIVE_HOOK="$REPO_PATH/hooks/post-receive"
    cat > $POSTRECEIVE_HOOK <<EOF
#!/bin/bash
cat | $SELF hook
EOF
    chmod +x $POSTRECEIVE_HOOK
    git-shell -c "$SSH_ORIGINAL_COMMAND"
    ;;

  hook)
    while read oldrev newrev refname
    do
      # Only run this script for the master branch. You can remove this 
      # if block if you wish to run it for others as well.
      if [[ $refname = "refs/heads/master" ]] ; then
        $GITHOME/receiver "$RECEIVE_REPO" "$newrev" "$RECEIVE_USER" "$RECEIVE_FINGERPRINT"  
      fi
    done
    ;;
  *)
    echo "Usage: gitreceive <command> [options]"
    ;;
esac
